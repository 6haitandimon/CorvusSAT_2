#pragma once#include "pico/stdlib.h"#include "hardware/i2c.h"//#include "pico/mutex.h"#include "BME280Reg.h"#include "cstdio"#include "math.h"namespace BME{struct BME280Data{  float temp;  float press;  float hum;}__packed;class BME280{private://  mutex_t i2c_mutex;  i2c_inst_t * i2c;  uint8_t i2cAddr;  uint8_t sda;  uint8_t scl;  uint8_t configVal;  uint8_t ctrl_hum;  uint8_t ctrl_maes;  int32_t t_fine;  struct bmp280_calib_param {    uint16_t dig_T1; ///< temperature compensation value    int16_t dig_T2;  ///< temperature compensation value    int16_t dig_T3;  ///< temperature compensation value    uint16_t dig_P1; ///< pressure compensation value    int16_t dig_P2;  ///< pressure compensation value    int16_t dig_P3;  ///< pressure compensation value    int16_t dig_P4;  ///< pressure compensation value    int16_t dig_P5;  ///< pressure compensation value    int16_t dig_P6;  ///< pressure compensation value    int16_t dig_P7;  ///< pressure compensation value    int16_t dig_P8;  ///< pressure compensation value    int16_t dig_P9;  ///< pressure compensation value    uint8_t dig_H1; ///< humidity compensation value    int16_t dig_H2; ///< humidity compensation value    uint8_t dig_H3; ///< humidity compensation value    int16_t dig_H4; ///< humidity compensation value    int16_t dig_H5; ///< humidity compensation value    int8_t dig_H6;  ///< humidity compensation value  } ParamCalib;  uint8_t readRegistr8Bit(uint8_t RegAddr);  uint16_t readRegistr16Bit(uint8_t RegAddr);  int16_t readRegistr16Bit_LE(uint8_t RegAddr);  uint32_t readRegistr24Bit(uint8_t RegAddr);  int writeRegistr(uint8_t RegAddr, uint8_t data);  void getCalibData();  int32_t convertData(uint32_t data);public:  BME280(i2c_inst_t *_i2c,  uint8_t _sda, uint8_t _scl, uint8_t _configVal = 0, uint8_t _addr = ADDR);  int32_t GetTemp();  uint32_t  GetPressure();  uint32_t GetHumidity();  float GetAltitude(float seeLevel);  void Reset();  void GetAllData(BME280Data* data);  //use only after reset  bool BME280_INIT();};}