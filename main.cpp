#include "cstdio"#include "pico/stdlib.h"#include "BME280.h"#include "sx1276.h"#include "ICM20948.h"#include "interrupt.h"#include "PCF8574.h"#include "m100Mini.h"#include "ff.h"#include "sd_card.h"#include "pico/multicore.h"#include "hardware/watchdog.h"LoRa Lora = LoRa(spi0, 16, 19, 18, 17, 20, 21);PCF8574::PCF8574 pcf8574 = PCF8574::PCF8574(i2c1, 6, 7);void miniSatPinInit(uint8_t gpio){  gpio_init(gpio);  gpio_set_dir(gpio, GPIO_IN);}bool miniSatCheck(uint8_t gpio){  if(gpio_get(gpio))    return true;  return false;}enum Module{  GPS_module = 26,  ICM_module = 2,  BME_module = 3};struct initStatus_t{  bool bme_s;  bool imu_s;  bool gps_s;  bool sdCard_i;  bool sdCard_s;  bool lora_s;}__packed initStatus;void modulePowerControl(Module module, bool powerStatus){  gpio_init(module);  gpio_set_dir(module, GPIO_OUT);  gpio_put(module, powerStatus);}void undocking(){  pcf8574.write(0x09);  busy_wait_ms(100);  pcf8574.write(0x00);}void resetModule(Module module){  modulePowerControl(module, false);  busy_wait_ms(200);  modulePowerControl(module, true);  switch (module) {    case GPS_module: initStatus.gps_s = false;    case ICM_module: initStatus.imu_s = false;    case BME_module: initStatus.bme_s = false;    }};struct Telemetry{  GPS::NAV_POSLLH gpsData;  BME::BME280Data bme280Data;  ICM::ICM20948Data icm20948Data;}__packed;void core1_main(){  BME::BME280 bme280 = BME::BME280(i2c0, 4, 5, 0x76);  ICM::ICM20948 icm20948 = ICM::ICM20948(i2c0, 4, 5, 0x68);  GPS::M100Mini m100Mini = GPS::M100Mini(uart1, 8, 9, 115200);  resetModule(GPS_module);  resetModule(ICM_module);  resetModule(BME_module);  FRESULT fr;  FATFS fs;  FIL fil;  int retStatus;  initStatus.bme_s = bme280.BME280_INIT();  initStatus.imu_s = icm20948.init();  if(sd_init_driver()) {    initStatus.sdCard_i = true;    fr = f_mount(&fs, "0:", 1);    if(fr == FR_OK){      initStatus.sdCard_s = true;      f_open(&fil, "log.bin", FA_WRITE | FA_CREATE_NEW);    }    else      initStatus.sdCard_s = false;  }  else    initStatus.sdCard_i = false;  if(initStatus.sdCard_s){    f_write(&fil, reinterpret_cast<char*>(&initStatus), sizeof(initStatus), nullptr);    f_close(&fil);  }  Telemetry telemetry{};  while(true){    if(multicore_fifo_wready())      multicore_fifo_push_blocking(1);      m100Mini.GetGPS(&telemetry.gpsData);      icm20948.getAllData(&telemetry.icm20948Data);      bme280.GetAllData(&telemetry.bme280Data);      printf("bme data:\n hum: %0.2f \n temp: %0.2f C\n press: %0.2f hPa\n", telemetry.bme280Data.hum, telemetry.bme280Data.temp, telemetry.bme280Data.press);      if(!initStatus.gps_s && (telemetry.gpsData.lat != 0.00 && telemetry.gpsData.lon != 0.00)){        initStatus.gps_s = true;      }else if(initStatus.gps_s && (telemetry.gpsData.lat == 0.00 || telemetry.gpsData.lon == 0.00))        resetModule(GPS_module);#ifdef DEBUG      if(initStatus.sdCard_s){        unsigned int dataWrite;        f_open(&fil, "telemetry.txt", FA_WRITE | FA_OPEN_APPEND);        f_write(&fil, reinterpret_cast<char*>(&telemetry), sizeof(telemetry), &dataWrite);        f_close(&fil);        printf("data write: %d\n", dataWrite);      }#else      if(initStatus.sdCard_s){      f_open(&fil, "telemetry.bin", FA_WRITE | FA_OPEN_APPEND);      f_write(&fil, reinterpret_cast<char*>(&telemetry), sizeof(telemetry), nullptr);      f_close(&fil);      }#endif      printf("core 1\n");  }}int main(){  stdio_init_all();//  multicore_reset_core1();  busy_wait_ms(150);  multicore_launch_core1(core1_main);  if(Lora.begin()){    Lora.setFrequency(869000000)        ->setTXPower(10)        ->setBandwidth(LoRa::BW_125k)        ->setSpreadFactor(LoRa::SF_12)        ->setCodingRate(LoRa::CR_48)        ->setSyncWord(0x12);    initStatus.lora_s = true;  }else{    initStatus.lora_s = false;  }  INTERRUPT::LoraInterruptSetup(21);  miniSatPinInit(10);  miniSatPinInit(11);  int timeout = 2500;  absolute_time_t start_time = get_absolute_time();  watchdog_enable(4000, true);  while(true){    if (multicore_fifo_rvalid()) {      int signal = multicore_fifo_pop_blocking();      if (signal == 1) {        start_time = get_absolute_time();      }    }    if (absolute_time_diff_us(start_time, get_absolute_time()) > timeout * 1000) {      printf("Core 1 is unresponsive. Resetting core 1.\n");      multicore_reset_core1();      multicore_launch_core1(core1_main);      start_time = get_absolute_time();    }    printf("core 0\n");    busy_wait_ms(500);    watchdog_update();  }}    