#pragma once#include "pico/stdlib.h"#include "cstdio"#include "hardware/uart.h"namespace GPS{static const uint8_t PAYLOAD_SIZE = 28;struct NAV_POSLLH {  uint16_t header; //header  uint8_t cls;        //Class                                     "0x01"  uint8_t id;         //ID                                        "0x02"  uint16_t len;       //Length (Bytes)                            "28"  uint32_t iTOW;       //GPS time of week of the navigation epoch  "ms"  int32_t lon;                 //Longitude                                 "deg"  int32_t lat;                 //Latitude                                  "deg"  int32_t height;              //Height above ellipsoid                    "mm"  int32_t hMSL;                //Height above mean sea level               "mm"  uint32_t hAcc;       //Horizontal accuracy estimate              "mm"  uint32_t vAcc;       //Vertical accuracy estimate                "mm"  uint16_t CTS; // controll sum//  bool notUpadte;} __packed;class M100Mini{private:  const uint8_t buffSize = sizeof(GPS::NAV_POSLLH);  uart_inst_t * _uart;  uint8_t _uartTXPin;  uint8_t _uartRXPin;  uint32_t _uartBauRate;  uint8_t read(uint8_t * buffer, size_t sizeBuff = 29);  void parseData(NAV_POSLLH *gpsStruct, uint8_t *buffer);  bool validateChecksum(uint8_t *buffer, size_t length);  void clearUartBuff();public:  M100Mini(uart_inst_t* uart, uint8_t uartTXPin, uint8_t uartRXPin, uint32_t uartBauRate);  void GetGPS(GPS::NAV_POSLLH *gpsStruct);};}