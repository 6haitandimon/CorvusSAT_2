#include "m100Mini.h"uint8_t GPS::M100Mini::read(uint8_t *buffer, size_t sizeBuff) {  uart_init(this->_uart, this->_uartBauRate);  while(!uart_is_readable(this->_uart));  uart_read_blocking(this->_uart, buffer, sizeBuff);  uart_deinit(this->_uart);  return 0;}GPS::M100Mini::M100Mini(uart_inst_t *uart, uint8_t uartTXPin, uint8_t uartRXPin,                        uint32_t uartBauRate) : _uart(uart), _uartRXPin(uartRXPin), _uartTXPin(uartTXPin), _uartBauRate(uartBauRate) {  uart_init(uart, uartBauRate);  gpio_set_function(uartRXPin, GPIO_FUNC_UART);  gpio_set_function(uartTXPin, GPIO_FUNC_UART);  uart_set_hw_flow(this->_uart, false, true);}void GPS::M100Mini::GetGPS(GPS::NAV_POSLLH* gpsStruct) {  uint8_t buffer[this->buffSize];  read(buffer, buffSize);  if(buffer[0] == 0xB5 && buffer[1] == 0x62)    if(buffer[4] == GPS::PAYLOAD_SIZE){      parseData(gpsStruct, buffer);    }}void GPS::M100Mini::parseData(GPS::NAV_POSLLH *gpsStruct, uint8_t* buffer) {  gpsStruct->header = *(reinterpret_cast<uint16_t *>(&buffer[0]));  gpsStruct->cls = buffer[2];  gpsStruct->id = buffer[3];  gpsStruct->len = *(reinterpret_cast<uint16_t*>(&buffer[4]));  gpsStruct->iTOW = *(reinterpret_cast<uint32_t *>(&buffer[6]));  gpsStruct->lon = *(reinterpret_cast<int32_t *>(&buffer[10]));  gpsStruct->lat = *(reinterpret_cast<int32_t *>(&buffer[14]));  gpsStruct->height = *(reinterpret_cast<int32_t *>(&buffer[18]));  gpsStruct->hMSL = *(reinterpret_cast<int32_t *>(&buffer[22]));  gpsStruct->hAcc = *(reinterpret_cast<uint32_t *>(&buffer[26]));  gpsStruct->vAcc = *(reinterpret_cast<uint32_t *>(&buffer[30]));  gpsStruct->CTS = *(reinterpret_cast<uint16_t *>(&buffer[34]));}bool GPS::M100Mini::validateChecksum(uint8_t *buffer, size_t length) {  uint8_t CK_A = 0, CK_B = 0;  for (size_t i = 2; i < length - 2; ++i) {    CK_A += buffer[i];    CK_B += CK_A;  }  return (CK_A == buffer[length - 2] && CK_B == buffer[length - 1]);}void GPS::M100Mini::clearUartBuff() {  while (uart_is_readable(this->_uart)) {    uart_getc(this->_uart);  }}